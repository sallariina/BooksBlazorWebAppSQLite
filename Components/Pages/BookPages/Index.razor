@page "/books"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorWebAppBooks.Models
@using BlazorWebAppBooks.Data
@implements IAsyncDisposable
@inject IDbContextFactory<BlazorWebAppBooks.Data.BlazorWebAppBooksContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Books</PageTitle>
<h1>Books</h1>

<p>
    <input type="search" @bind="titleFilter" @bind:event="oninput" />
    <Button Color="ButtonColor.Primary" Outline="true" @onclick="args => ButtonRoutes.CreateBook(NavigationManager)"> Create New </Button>
</p>


<QuickGrid Class="table table-hover" Items="FilteredBooks" Pagination="pagination">
    <PropertyColumn Property="book => book.Title" Sortable="true"/>
    <PropertyColumn Property="book => book.ReleaseDate" Title="Release Date" Sortable="true" />
    <TemplateColumn Title="Genre">
        <p>@Genres(context)</p>
    </TemplateColumn>
    <PropertyColumn Property="book => book.Author" Sortable="true" />

    <TemplateColumn Context="book">
        <Button Color="ButtonColor.Primary" Outline="true" @onclick="args => ButtonRoutes.EditBook(book, NavigationManager)"> Edit </Button>
        <Button Color="ButtonColor.Primary" Outline="true" @onclick="args => ButtonRoutes.DetailsBook(book, NavigationManager)"> Details </Button>
        <Button Color="ButtonColor.Primary" Outline="true" @onclick="args => ButtonRoutes.DeleteBook(book, NavigationManager)"> Delete </Button>
    </TemplateColumn>
</QuickGrid>
<Paginator State="pagination" />

@code {
    private Book? book;
    private string titleFilter = string.Empty;
    private BookGenre? bookGenre;
    private List<BookGenre> bookGenres = new List<BookGenre>();
    private List<Genre> genres = new List<Genre>();

    private IQueryable<Book> FilteredBooks =>
        context.Book.Where(x => x.Title.ToLower()!.Contains(titleFilter.ToLower()));

    private BlazorWebAppBooksContext context = default!;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        bookGenres = context.BookGenre.ToList();
        genres = context.Genre.ToList();
    }

    private string Genres(Book book)
    {   
        List<String> genres2 = new List<String>();
        foreach (BookGenre bookGenre in bookGenres)
        {
            if (bookGenre.BookId == book.Id)
            {
                genres2.Add(genres.Find(x => x.Id == bookGenre.GenreId)?.Name);
            }
        }
        genres2 = genres2.OrderBy(x => x).ToList();
        return String.Join(", ", genres2.ToArray());
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    private PaginationState pagination = new PaginationState { ItemsPerPage = 15 };
}
