@page "/books"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorWebAppBooks.Models
@using BlazorWebAppBooks.Data
@implements IAsyncDisposable
@inject IDbContextFactory<BlazorWebAppBooks.Data.BlazorWebAppBooksContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Index</PageTitle>

<p>
    <input type="search" @bind="titleFilter" @bind:event="oninput" />
    <button type="button" class="btn btn-primary" @onclick="@(()=>NavigationManager.NavigateTo("books/create"))">Create New</button>
</p>



<QuickGrid Class="table" Items="FilteredBooks" Pagination="pagination">
    <PropertyColumn Property="book => book.Title" Sortable="true"/>
    <PropertyColumn Property="book => book.ReleaseDate" Title="Release Date"/>
    <PropertyColumn Property="book => book.Genre" />
    <PropertyColumn Property="book => book.Author" />

    <TemplateColumn Context="book">
        <a href="@($"books/edit?id={book.Id}")">Edit</a> |
        <a href="@($"books/details?id={book.Id}")">Details</a> |
        <a href="@($"books/delete?id={book.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>
<Paginator State="pagination" />

@code {
    private string titleFilter = string.Empty;

    private IQueryable<Book> FilteredBooks =>
        context.Book.Where(x => x.Title.ToLower()!.Contains(titleFilter.ToLower()));

    private BlazorWebAppBooksContext context = default!;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    private PaginationState pagination = new PaginationState { ItemsPerPage = 15 };
}
