@page "/books/delete"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using BlazorWebAppBooks.Models
@inject IDbContextFactory<BlazorWebAppBooks.Data.BlazorWebAppBooksContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Book</h2>
    <hr />
    @if (book is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@book.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Release Date</dt>
            <dd class="col-sm-10">@book.ReleaseDate</dd>
        </dl>
@*         <dl class="row">
            <dt class="col-sm-2">Genre</dt>
            <dd class="col-sm-10">@book.Genre</dd>
        </dl> *@
        <dl class="row">
            <dt class="col-sm-2">Author</dt>
            <dd class="col-sm-10">@book.Author</dd>
        </dl>
        <EditForm method="post" Model="book" OnValidSubmit="DeleteBook" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(book is null)">Delete</button>
            <Button Color="ButtonColor.Primary" Outline="true" @onclick="args => ButtonRoutes.Back(NavigationManager)"> Back </Button>
        </EditForm>
    }
</div>

@code {
    private Book? book;
    private BookGenre? bookGenre;
    private List<BookGenre> bookGenres = new List<BookGenre>();

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        book = await context.Book.FirstOrDefaultAsync(m => m.Id == Id);

        if (book is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        bookGenre = await context.BookGenre.FirstOrDefaultAsync(m => m.Book.Id == Id);
        bookGenres.Add(bookGenre);
    }

    private async Task DeleteBook()
    {
        using var context = DbFactory.CreateDbContext();
        context.Book.Remove(book!);
        context.BookGenre.RemoveRange(bookGenres);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/books");
    }
}
