@page "/books/create"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using BlazorWebAppBooks.Models
@inject IDbContextFactory<BlazorWebAppBooks.Data.BlazorWebAppBooksContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Book</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Book" OnValidSubmit="AddBook" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="title" class="form-label">Title:</label> 
                <InputText id="title" @bind-Value="Book.Title" @oninput="NameChanged" @onblur="NameChanged" class="form-control" /> 
                @* <InputText id="title" @bind-Value="Book.Title" class="form-control" /> *@
                <ValidationMessage For="() => Book.Title" class="text-danger" /> 
                <p class="text-danger">@errorMessage</p>
            </div>        
            <div class="mb-3">
                <label for="releasedate" class="form-label">Release Date:</label> 
                <InputDate id="releasedate" @bind-Value="Book.ReleaseDate" class="form-control" /> 
                <ValidationMessage For="() => Book.ReleaseDate" class="text-danger" /> 
            </div>        
@*             <div class="mb-3">
                <label for="genre" class="form-label">Genre:</label> 
                <InputText id="genre" @bind-Value="Book.Genre" class="form-control" /> 
                <ValidationMessage For="() => Book.Genre" class="text-danger" /> 
            </div>   *@      
            <div class="mb-3">
                <label for="author" class="form-label">Author:</label> 
                <InputText id="author" @bind-Value="Book.Author" class="form-control" /> 
                <ValidationMessage For="() => Book.Author" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>  <Button Color="ButtonColor.Primary" Outline="true" @onclick="args => ButtonRoutes.BackBook(NavigationManager)"> Back </Button>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private Book Book { get; set; } = new();
    private BookGenre BookGenre { get; set; } = new();
    private String errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        Book.ReleaseDate = DateOnly.FromDateTime(DateTime.Today);
        await base.OnInitializedAsync();
    }

    private async Task AddBook()
    {

        using var context = DbFactory.CreateDbContext();
        var result = context.Book.FirstOrDefault(x => x.Title.ToLower() == Book.Title.ToLower());
        if (result == null)
        {
            try
            {
                BookGenre.Genre = context.Genre.Where(x => x.Name.ToLower()!.Contains("romance")).First();
                context.Book.Add(Book);
                await context.SaveChangesAsync();
                BookGenre.Book = Book;
                context.BookGenre.Add(BookGenre);
                await context.SaveChangesAsync();
            }
            catch (Exception e)
            {
            }
            NavigationManager.NavigateTo("/books");
        }
        else
        {
            errorMessage = "This book already exists";
        }
    }
    private void NameChanged()
    {
        errorMessage = "";
    }
}
